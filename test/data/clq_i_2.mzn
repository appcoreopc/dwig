% This is a randomly generated B-QP built by D-WIG (https://github.com/lanl-ansi/dwig) using the clq algorithm  A random number seed of 0 was used.
% chimera_cell_size : 8
% chimera_degree : 12
% generated : 2017-03-06 22:09:48.736088
% generator : clq

set of int: Domain = {-1,1};
float: offset = 56.0;

var Domain: x0;
var Domain: x1;
var Domain: x2;
var Domain: x3;
var Domain: x4;
var Domain: x5;
var Domain: x6;
var Domain: x7;
var Domain: x8;
var Domain: x9;
var Domain: x10;
var Domain: x11;
var Domain: x12;
var Domain: x13;
var Domain: x14;
var Domain: x15;
var Domain: x96;
var Domain: x97;
var Domain: x98;
var Domain: x99;
var Domain: x100;
var Domain: x101;
var Domain: x102;
var Domain: x103;
var Domain: x104;
var Domain: x105;
var Domain: x106;
var Domain: x107;
var Domain: x108;
var Domain: x109;
var Domain: x110;
var Domain: x111;

var float: objective = offset + 2.0*x0 + 2.0*x1 + 2.0*x2 + 2.0*x3 + 2.0*x4 + 2.0*x5 + 2.0*x6 + 2.0*x7 + 2.0*x8 + 2.0*x9 + 2.0*x10 + 2.0*x11 + 2.0*x12 + 2.0*x13 + 2.0*x14 + 2.0*x15 + 2.0*x96 + 2.0*x97 + 2.0*x98 + 2.0*x99 + 2.0*x100 + 2.0*x101 + 2.0*x102 + 2.0*x103 + 2.0*x104 + 2.0*x105 + 2.0*x106 + 2.0*x107 + 2.0*x108 + 2.0*x109 + 2.0*x110 + 2.0*x111 + 0.333333333333*x0*x4 + 0.333333333333*x0*x5 + 0.333333333333*x0*x6 + 0.333333333333*x0*x7 + 0.333333333333*x0*x96 + 0.333333333333*x1*x4 + 0.333333333333*x1*x5 + 0.333333333333*x1*x6 + 0.333333333333*x1*x7 + 0.333333333333*x1*x97 + 0.333333333333*x2*x4 + 0.333333333333*x2*x5 + 0.333333333333*x2*x6 + 0.333333333333*x2*x7 + 0.333333333333*x2*x98 + 0.333333333333*x3*x4 + 0.333333333333*x3*x5 + 0.333333333333*x3*x6 + 0.333333333333*x3*x7 + 0.333333333333*x3*x99 + 0.333333333333*x4*x12 + 0.333333333333*x5*x13 + 0.333333333333*x6*x14 + 0.333333333333*x7*x15 + 0.333333333333*x8*x12 + 0.333333333333*x8*x13 + 0.333333333333*x8*x14 + 0.333333333333*x8*x15 + 0.333333333333*x8*x104 + 0.333333333333*x9*x12 + 0.333333333333*x9*x13 + 0.333333333333*x9*x14 + 0.333333333333*x9*x15 + 0.333333333333*x9*x105 + 0.333333333333*x10*x12 + 0.333333333333*x10*x13 + 0.333333333333*x10*x14 + 0.333333333333*x10*x15 + 0.333333333333*x10*x106 + 0.333333333333*x11*x12 + 0.333333333333*x11*x13 + 0.333333333333*x11*x14 + 0.333333333333*x11*x15 + 0.333333333333*x11*x107 + 0.333333333333*x96*x100 + 0.333333333333*x96*x101 + 0.333333333333*x96*x102 + 0.333333333333*x96*x103 + 0.333333333333*x97*x100 + 0.333333333333*x97*x101 + 0.333333333333*x97*x102 + 0.333333333333*x97*x103 + 0.333333333333*x98*x100 + 0.333333333333*x98*x101 + 0.333333333333*x98*x102 + 0.333333333333*x98*x103 + 0.333333333333*x99*x100 + 0.333333333333*x99*x101 + 0.333333333333*x99*x102 + 0.333333333333*x99*x103 + 0.333333333333*x100*x108 + 0.333333333333*x101*x109 + 0.333333333333*x102*x110 + 0.333333333333*x103*x111 + 0.333333333333*x104*x108 + 0.333333333333*x104*x109 + 0.333333333333*x104*x110 + 0.333333333333*x104*x111 + 0.333333333333*x105*x108 + 0.333333333333*x105*x109 + 0.333333333333*x105*x110 + 0.333333333333*x105*x111 + 0.333333333333*x106*x108 + 0.333333333333*x106*x109 + 0.333333333333*x106*x110 + 0.333333333333*x106*x111 + 0.333333333333*x107*x108 + 0.333333333333*x107*x109 + 0.333333333333*x107*x110 + 0.333333333333*x107*x111;

solve minimize objective;

output [show(objective), " - ", show([x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x96, x97, x98, x99, x100, x101, x102, x103, x104, x105, x106, x107, x108, x109, x110, x111])];
